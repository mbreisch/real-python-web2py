(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'C:\\babun\\.babun\\cygwin\\home\\Matthew B. Reisch\\RealPython\\web2py\\start\\applications\\pulse\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport requests\nimport json\n\ndef index():\n    return dict()\n\ndef process(my_list):\n\n    # analyze first item\n    binary_first = my_list[1]\n    output_first = json.loads(binary_first)\n    label_first = output_first["label"]\n\n    # analyze second item\n    binary_second = my_list[3]\n    output_second = json.loads(binary_second)\n    label_second = output_second["label"]\n\n    # logic\n    if label_first == "pos":\n        if label_second !="pos":\n            return my_list[0]\n        else:\n            if output_first["probability"]["pos"] > output_second["probability"]["pos"]:\n                return my_list[0]\n            else:\n                return my_list[2]\n    elif label_first =="neg":\n        if label_second !="neg":\n            return my_list[2]\n        else:\n            if output_first["probability"]["neg"] < output_second["probability"]["neg"]:\n                return my_list[0]\n            else:\n                return my_list[2]\n    elif label_first == "neutral":\n        if label_second =="pos":\n            return my_list[2]\n        elif label_second == "neg":\n            return my_list[0]\n        else:\n            if output_first["probability"]["pos"] > output_second["probability"]["pos"]:\n                return my_list[0]\n            else:\n                return my_list[2]\n\ndef pulse():\n    session.m=[]\n    url=\'http://text-processing.com/api/sentiment/\'\n\n    text_first=request.vars.first_item\n    text_first=text_first.split(\'_\')\n    text_first=\' \'.join(text_first)\n    data_first={\'text\':text_first}\n    r_first=requests.post(url,data=data_first)\n    session.m.append(r_first.content)\n\n    text_second=request.vars.second_item\n    text_second=text_second.split(\'_\')\n    text_second=\' \'.join(text_second)\n    data_second={\'text\':text_second}\n    r_second=requests.post(url,data=data_second)\n    session.m.append(r_second.content)\n\n    winner=process(session.m)\n    return "The winner is {}".format(winner)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(pulse)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\babun\\.babun\\cygwin\\home\\Matthew B. Reisch\\RealPython\\web2py\\start\\gluon\\restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "C:\\babun\\.babun\\cygwin\\home\\Matthew B. Reisch\\RealPython\\web2py\\start\\applications\\pulse\\controllers/default.py", line 132, in <module>\n  File "C:\\babun\\.babun\\cygwin\\home\\Matthew B. Reisch\\RealPython\\web2py\\start\\gluon\\globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\babun\\.babun\\cygwin\\home\\Matthew B. Reisch\\RealPython\\web2py\\start\\applications\\pulse\\controllers/default.py", line 75, in pulse\n    winner=process(session.m)\n  File "C:\\babun\\.babun\\cygwin\\home\\Matthew B. Reisch\\RealPython\\web2py\\start\\applications\\pulse\\controllers/default.py", line 25, in process\n    binary_second = my_list[3]\nIndexError: list index out of range\n'
p11
s.